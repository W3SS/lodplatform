package com.ucuenca.pentaho.plugin.step;

import com.hp.hpl.jena.graph.*;
import com.hp.hpl.jena.rdf.model.*;

/** .
 * @author Fabian Pe√±aloza Marin
 * @version 1
 */
public class elda{

   protected static final String uri ="http://www.epimorphics.com/vocabularies/lda#";

   /** returns the URI for this schema
       @return the URI for this schema
   */
   public static String getURI()
       { return uri; }

   protected static final Resource resource( String local )
       { return ResourceFactory.createResource( uri + local ); }

   protected static final Property property( String local )
       { return ResourceFactory.createProperty( uri, local ); }

   public static Property li( int i )
       { return property( "_" + i ); }

   public static final Property FeedFormatter  = property( "FeedFormatter" );
   public static final Property VelocityFormatter = property("VelocityFormatter");
   public static final Property className  = property( "className" );
   public static final Property feedTitle = property("feedTitle");
   public static final Property enableCounting  = property( "enableCounting" );
   public static final Property cacheExpiryTime = property("cacheExpiryTime");
   public static final Property textSearchOperand = property("textSearchOperand");
   public static final Property velocityTemplate = property("velocityTemplate");
   /**
       The same items of vocabulary, but at the Node level, parked inside a
       nested class so that there's a simple way to refer to them.
   */
   @SuppressWarnings("hiding") public static final class Nodes
       {
       public static final Node FeedFormatter  = elda.FeedFormatter .asNode();
       public static final Node VelocityFormatter  = elda.VelocityFormatter .asNode();
       public static final Node className  = elda.className .asNode();
       public static final Node feedTitle  = elda.feedTitle .asNode();
       public static final Node enableCounting  = elda.enableCounting .asNode();
       public static final Node cacheExpiryTime  = elda.cacheExpiryTime .asNode();
       public static final Node textSearchOperand  = elda.textSearchOperand .asNode();
       public static final Node velocityTemplate  = elda.velocityTemplate .asNode();	
       }

}

